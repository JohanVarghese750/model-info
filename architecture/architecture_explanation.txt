Scripting language : Google Appscript, Javascript
Front-end : HTML, CSS, Vanilla Javascript

Working : 
1.The user on reaching the home page(Task info) has 3 options
  1.1 Get details on a particular task
  1.2 Add details of a task
  1.3 A dropdown to common utilities used by the team
2.The appscript checks what if it is a read or a write and redirects the request to the correspoding Google spreadsheet
3.The fetched information is brought back to the webpage and is displayed

Explanation :
Google appscript was used to develop this application because most people in the org had access to Google workspace and the appscript could be extended to create beautiful light weight web applications called Webapps. This was helpful as the utility was designed to be used by anyone in the team or anyone accross the organization.
Bootstrap was also made use in the application to make it more user intuitive.

Working
Task Info :
The Task Info or the home page is the landing page in the application comprising of a search bar and a button to do voice searches. Javascript webkitSpeechRecognition() object was defiened to do the same.The home page also contains a navigation to the '+ Details' page which is used to add new info or a user can use the utils dropdown to navigate to relevant information available on other external pages.

On entering a search keyword(preferably a taskname or a substring of the task name) the request is passed to the appscript engine which fetches the relevant information from the Google spreadsheets and returns back and displays in the WebApp as tables.

+ Details : 
The + Details(read as add details) screen is used to add info on newly created tasks. A user can input the required information on the given input fields and on clicking the add button the information is passed into the appscript engine and is updated on the Google spreadsheet.

Utils dropdown : Utils is a dropdown that contains information hrefs to relevant team documents.

Adding multiple html pages to webapps:
There are multiple solutions available on linking more than one web page to the google appscript and the solution adopted in the project was to check if a spricific page was requested if not, then the home page was served, else the requested page
  
 
A pod was also placed to appear when clicking on the footer.  
